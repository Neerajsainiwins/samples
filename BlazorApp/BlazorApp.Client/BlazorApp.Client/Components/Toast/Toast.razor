@using BlazorApp.Client.Components.Enums

<div class="toast-message-container">
    @if (isVisible)
    {
        <div class="toast @(backgroundCssClass)">
            <div class="toast-message-box">
                <div class="toast-icon">
                    <i class="fa fa-@iconCssClass" aria-hidden="true"></i>
                </div>
                <div class="toast-body">
                    <h5>@heading</h5>
                    <p>@message</p>
                </div>
                <button class="toast-close-button" @onclick="HideToast">X</button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }

    private string heading = string.Empty;
    private string message = string.Empty;
    private string backgroundCssClass = string.Empty;
    private string iconCssClass = string.Empty;
    private bool isVisible = false;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        ToastService.OnHide += HideToast;
    }

    private void ShowToast(string message, ToastLevel level)
    {
        BuildToastSettings(level, message);
        isVisible = true;
        StateHasChanged();
        _ = HideToastAfterDelayAsync();
    }

    private async Task HideToastAfterDelayAsync()
    {
        await Task.Delay(3000);
        HideToast();
    }

    private void HideToast()
    {
        isVisible = false;
        StateHasChanged();
    }

    private void BuildToastSettings(ToastLevel level, string message)
    {
        this.message = message;

        switch (level)
        {
            case ToastLevel.Info:
                backgroundCssClass = "toast-message-default";
                iconCssClass = "info-circle";
                heading = "Info";
                break;
            case ToastLevel.Success:
                backgroundCssClass = "toast-message-success";
                iconCssClass = "check-circle";
                heading = "Success";
                break;
            case ToastLevel.Warning:
                backgroundCssClass = "toast-message-warning";
                iconCssClass = "exclamation-triangle";
                heading = "Warning";
                break;
            case ToastLevel.Error:
                backgroundCssClass = "toast-message-failure";
                iconCssClass = "times-circle";
                heading = "Error";
                break;
        }
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
        ToastService.OnHide -= HideToast;
    }
}
