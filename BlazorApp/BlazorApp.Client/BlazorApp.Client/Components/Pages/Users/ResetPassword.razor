@page "/reset-password"
@inject HttpClient httpClient
@inject IAuthenticationService authenticationService
@inject NavigationManager Navigation
@inject GetClaimsFromToken getClaimsFromToken
@using Microsoft.AspNetCore.WebUtilities


<div class="login-wrapper">
    <div class="login-wrapper-inner">
        <div class="login-wrapper-body">
            <EditForm Model="@resetPasswordModel" FormName="ResetPassword">
                <DataAnnotationsValidator />
                <div class="form-group mb-3">
                    <labe class="text-white">NewPassword</labe>
                    <InputText id="Password" @bind-Value="resetPasswordModel.NewPassword" type="password"  class="form-control text-white" />
                    <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
                </div>
                <div class="form-group mb-3">
                    <labe class="text-white">ConfirmPassword</labe>
                    <InputText id="ConfirmPassword" @bind-Value="resetPasswordModel.ConfirmPassword" type="password" class="form-control text-white" />
                    <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" />
                </div>
                <div>
                    <button disabled="@loading" class="btn btn-primary w-100 btn-sm py-2" type="submit" @onclick='HandleResetPassword'>
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Reset
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code{
    ResetPasswordDto resetPasswordModel = new ResetPasswordDto();
    private bool loading = false;
    private string token;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var tokenValue))
        {
            token = tokenValue;
        }
    }

    public async Task HandleResetPassword()
    {
        try
        {
            loading = true;
            resetPasswordModel.UserId = (await getClaimsFromToken.GetClaims("uid", token)).FirstOrDefault().Value;
            resetPasswordModel.Email = (await getClaimsFromToken.GetClaims("email", token)).FirstOrDefault().Value;

            var response = await httpClient.PostAsJsonAsync("http://localhost:5093/api/Users/ResetPassword", resetPasswordModel);
            if (response.IsSuccessStatusCode)
            {
                loading = false;
                ToastService.ShowToast("Reset successfully!", ToastLevel.Success);
                navigationManager.NavigateTo("/users/login");
            }
            else
            {
                loading = false;
                ToastService.ShowToast("Reset Failed! something went wrong and Please try again", ToastLevel.Error);
            }
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
	}
}