@page "/user/index"
@inject IUserService userService
<h3>User List</h3>

<!-- Filters -->
<div>
    <input type="text" @bind="nameFilter" placeholder="Filter by first name" />
    <button class="btn btn-primary" @onclick="ApplyFilter">Apply Filter</button>
</div>

<div>
    <label for="pageSize">Page Size:</label>
    <select class="form-control w-25" @onchange="PageSizeChanged">
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="15">15</option>
        <option value="25">25</option>
    </select>
</div>


<!-- users List -->
@if (editedUser != null && editedUser.Any())
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th @onclick="@(() => ApplySorting("FirstName"))">First Name</th>
                <th @onclick="@(() => ApplySorting("LastName"))">Last Name</th>
                <th @onclick="@(() => ApplySorting("Email"))">Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in editedUser)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditUser(user)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => Deleteuser(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No users available.</p>
}

<!-- Pagination -->
<div class="d-flex justify-content-between mt-3">
    <button class="btn btn-primary" disabled="@(!CanGoToPreviousPage)">Previous</button>
    <div class="pagination-info">
        <p>Page @pageNumber of @totalPages</p>
    </div>    <button class="btn btn-primary" disabled="@(!CanGoToNextPage)">Next</button>
</div>

<!-- Update Modal -->
<div class="modal @(isEditModalVisible ? "show" : "")" tabindex="-1" role="dialog" style="display: @(isEditModalVisible ? "block" : "none")">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update</h5>
                <button type="button" class="close" @onclick="CloseEditModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="form-row">
                    <div class="form-group">
                        <label for="FirstName">First Name: </label>
                        <input type="text" id="FirstName" class="form-control" @bind="@users.FirstName" placeholder="Enter First Name" />
                    </div>

                    <div class="form-group">
                        <label for="LastName">Last Name: </label>
                        <input type="text" id="LastName" class="form-control" @bind="@users.LastName" placeholder="Enter Last Name" />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="Email">Email: </label>
                        <input type="text" id="Email" class="form-control" @bind="@users.Email" placeholder="Enter Email" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                @* <button type="submit" id="btnsubmit" class="btn btn-success" disabled="@isEmployeeCreating" @onclick="() => SaveUser(editedUser.Id)">Save</button> *@
                <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
            </div>
        </div>
    </div>
</div>


@code {
    List<ApiUser> editedUser { get; set; } = new List<ApiUser>();
    private CommonReadOnlyDtoVirtualizeResponse response;
    private CommonResponseModel responseModel = new();
    private UserDto users = new();

    private bool isEditModalVisible = false;
    private bool isEmployeeCreating = false;
    private string nameFilter = string.Empty;
    private int pageNumber = 1;
    private int pageSize = 10;
    private string sortBy = "FirstName";
    private string sortOrder = "asc";
    private int totalPages;

    private bool CanGoToPreviousPage => pageNumber > 1;
    private bool CanGoToNextPage => (response?.TotalRecords ?? 0) > (pageNumber * pageSize);

    protected override async Task OnInitializedAsync()
    {
        await Fetchusers();
    }

    private async Task Fetchusers()
    {
        response = await userService.GetUsers(nameFilter, pageNumber, pageSize, sortBy, sortOrder);
        if (response != null)
        {
            // users = response;
            totalPages = response.TotalPages;
            pageNumber = response.PageIndex;
        }
    }

    private async Task ApplySorting(string column)
    {
        if (sortBy == column)
            sortOrder = sortOrder == "asc" ? "desc" : "asc";
        else
        {
            sortBy = column;
            sortOrder = "asc";
        }

        pageNumber = 1;
        await Fetchusers();
    }

    private async Task ApplyFilter()
    {
        pageNumber = 1;
        await Fetchusers();
    }

    private async Task ChangePage(int offset)
    {
        pageNumber += offset;

        if (pageNumber < 1)
            pageNumber = 1;

        if (pageNumber > totalPages)
            pageNumber = totalPages;

        await Fetchusers();
    }

    private void EditUser(ApiUser user)
    {
        users = new()
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email
            };
        isEditModalVisible = true;
    }

    private async Task Deleteuser(string id)
    {
        try
        {
            var result = await userService.DeleteUser(id);

            if (result?.Success == true)
            {
                ToastService.ShowToast("user deleted successfully!", Enums.ToastLevel.Success);
                await Fetchusers();
            }
            else
            {
                ToastService.ShowToast(result?.Message ?? "Failed to delete user.", Enums.ToastLevel.Error);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error: {ex.Message}", Enums.ToastLevel.Error);
        }
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
    }

    private async Task SaveUser(string id)
    {
        try
        {
            var result = await userService.UpdateUser(users, id);

            if (result?.Success == true)
            {
                CloseEditModal();
                ToastService.ShowToast("user Updated successfully!", Enums.ToastLevel.Success);
                await Fetchusers();
            }
            else
            {
                ToastService.ShowToast(result?.Message ?? "Failed to update user.", Enums.ToastLevel.Error);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Error: {ex.Message}", Enums.ToastLevel.Error);
        }
    }
    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        await Fetchusers();
    }
}
